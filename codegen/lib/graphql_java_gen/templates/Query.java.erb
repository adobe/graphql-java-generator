<%= render_license %>

package <%= package_name %>;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.shopify.graphql.support.AbstractResponse;
import com.shopify.graphql.support.Arguments;
import com.shopify.graphql.support.Error;
import com.shopify.graphql.support.AbstractQuery;
import com.shopify.graphql.support.SchemaViolationError;
import com.shopify.graphql.support.TopLevelResponse;
import com.shopify.graphql.support.Input;
import com.shopify.graphql.support.Fragment;
<% imports.each do |import| %>
  import <%= import %>;
<% end %>

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
<%- if schema.root_name?(type.name) -%>
import java.util.LinkedHashMap;
<%- end -%>
import java.util.Map;


<% fields = type.fields(include_deprecated: include_deprecated).sort_by{ |field| field.name } || [] %>
<%= java_doc(type) %>
public class <%= type.name %>Query extends AbstractQuery<<%= type.name %>Query> {
    <% if type.object? %>
    <%= type.name %>Query(StringBuilder _queryBuilder) {
        super(_queryBuilder);
        <% if type.object? && type.implement?("Node") %>
            startField("id");
        <% end %>
    }
    <% else %>
    <%= type.name %>Query(StringBuilder _queryBuilder) {
        this(_queryBuilder, true);
    }
    <%= type.name %>Query(StringBuilder _queryBuilder, boolean addTypename) {
        super(_queryBuilder);
        <%- if type.object? && type.implement?("Node") -%>
            startField("id");
        <%- end -%>
        if (addTypename) {
            startField("__typename");
        }
    }
    <% end %>

    <% fields.each do |field| %>
        <% next if field.name == "id" && type.object? && type.implement?("Node") %>
        <% unless field.optional_args.empty? %>
            public class <%= field.classify_name %>Arguments extends Arguments {
                <%= field.classify_name %>Arguments(StringBuilder _queryBuilder) {
                    super(_queryBuilder, <%= !!field.required_args.empty? %>);
                }

                <% field.optional_args.each do |arg| %>
                    <%= java_doc(arg) %>
                    public <%= field.classify_name %>Arguments <%= escape_reserved_word(arg.camelize_name) %>(<%= java_input_type(arg.type) %> value) {
                        if (value != null) {
                            startArgument("<%= arg.name %>");
                            <%= generate_build_input_code('value', arg.type) %>
                        }
                        return this;
                    }
                <% end %>
            }

            public interface <%= field.classify_name %>ArgumentsDefinition {
                void define(<%= field.classify_name %>Arguments args);
            }

            <%= java_doc(field) %>
            public <%= type.name %>Query <%= escape_reserved_word(field.camelize_name) %>(<%= java_arg_defs(field, skip_optional: true) %>) {
                return <%= escape_reserved_word(field.camelize_name) %>(<%= java_arg_expresions_with_empty_optional_args(field) %>);
            }
        <% end %>

        <%= java_doc(field) %>
        <%= field.deprecated? ? "@Deprecated\n" : '' -%>
        public <%= type.name %>Query <%= escape_reserved_word(field.camelize_name) %>(<%= java_arg_defs(field) %>) {
            startField("<%= field.name %>");
            <% unless field.args.empty? %>
                <% if field.required_args.empty? %>
                    <%= field.classify_name %>Arguments args = new <%= field.classify_name %>Arguments(_queryBuilder);
                    argsDef.define(args);
                    <%= field.classify_name %>Arguments.end(args);
                <% else %>
                    <% field.required_args.each_with_index do |arg, i| %>
                      _queryBuilder.append("<%= i == 0 ? "(" : "," %><%= arg.name %>:");
                      <%= generate_build_input_code(escape_reserved_word(arg.camelize_name), arg.type) %>
                    <% end %>
                    <% unless field.optional_args.empty? %>
                        argsDef.define(new <%= field.classify_name %>Arguments(_queryBuilder));
                    <% end %>
                    _queryBuilder.append(')');
                <% end %>
            <% end %>
            <% if field.subfields? %>
                _queryBuilder.append('{');
                queryDef.define(new <%= field.type.unwrap.name %>Query(_queryBuilder));
                _queryBuilder.append('}');
            <% end %>
            return this;
        }
    <% end %>
    <% unless type.object? %>
        <% type.possible_types.each do |possible_type| %>
            public <%= type.name %>Query on<%= possible_type.name %>(<%= possible_type.name %>QueryDefinition queryDef) {
                startInlineFragment("<%= possible_type.name %>");
                queryDef.define(new <%= possible_type.name %>Query(_queryBuilder));
                _queryBuilder.append('}');
                return this;
            }
        <% end %>
    <% end %>

    <% if schema.root_name?(type.name) %>
      public String toString() {
          if (fragments != null) {
              for (Fragment fragment : fragments.values()) {
                  _queryBuilder.append(fragment.toString());
              }
          }
          return _queryBuilder.toString();
      }

      private Map<String, Fragment> fragments;

      /**
       * Adds a GraphQL "named" fragment to the query. If a fragment with the same name is already added,
       * calling this method will replace the existing fragment.
       * 
       * @param fragment The fragment to add.
      */
      public <%= type.name %>Query addFragment(Fragment fragment) {
          if (fragments == null) {
              fragments = new LinkedHashMap<>();
          }
          fragments.put(fragment.getName(), fragment);
          return this;
      }
    <% end %>
    <% if type.name == "Query" %>

      /**
      * The root __schema field for introspection queries.
      */
      public QueryQuery __schema(__SchemaQueryDefinition queryDef) {
          startField("__schema");

          _queryBuilder.append('{');
          queryDef.define(new __SchemaQuery(_queryBuilder));
          _queryBuilder.append('}');

          return this;
      }

      /**
      * The root __type field for introspection queries.
      */
      public QueryQuery __type(String name, __TypeQueryDefinition queryDef) {
        startField("__type");

        _queryBuilder.append("(name:");
        AbstractQuery.appendQuotedString(_queryBuilder, name);
        _queryBuilder.append(')');

        _queryBuilder.append('{');
        queryDef.define(new __TypeQuery(_queryBuilder));
        _queryBuilder.append('}');

        return this;
      }
    <% end %>

    /**
     * Creates a GraphQL "named" fragment with the specified query type definition.
     * The generics nature of fragments ensures that a fragment can only be used at the right place in the GraphQL request.
     * 
     * @param name The name of the fragment, must be unique for a given GraphQL request.
     * @param queryDef The fragment definition.
     * @return The fragment of a given generics type.
     */
    public static Fragment<<%= type.name %>Query> createFragment(String name, <%= type.name %>QueryDefinition queryDef) {
        StringBuilder sb = new StringBuilder();
        <%- if type.object? -%>
        queryDef.define(new <%= type.name %>Query(sb));
        <%- else -%>
        queryDef.define(new <%= type.name %>Query(sb, false));
        <%- end -%>
        return new Fragment<>(name, "<%= type.name %>", sb.toString());
    }

    /**
     * Adds a <code><%= type.name %>Query</code> fragment reference at the current position of the query.
     * For example for a fragment named <code>test</code>, calling this method will add the
     * reference <code>...test</code> in the query. For GraphQL types implementing an interface, there
     * will be some similar methods using the Query type of each implemented interface.
     * 
     * @param fragment The fragment to reference.
     */
    public <%= type.name %>Query addFragmentReference(Fragment<<%= type.name %>Query> fragment) {
        startField("..." + fragment.getName());
        return this;
    }

    <% if type.object? && !type.interfaces.empty? %>
    <% type.interfaces.each do |interface| %>
    /**
    * Adds a <code><%= interface.name %>Query</code> fragment reference at the current position of the query.
    * For example for a fragment named <code>test</code>, calling this method will add the
    * reference <code>...test</code> in the query.
    * 
    * @param fragment The fragment to reference.
    */
    public <%= type.name %>Query add<%= interface.name %>FragmentReference(Fragment<<%= interface.name %>Query> fragment) {
        startField("..." + fragment.getName());
        return this;
    }
    <% end %>
    <% end %>
}
